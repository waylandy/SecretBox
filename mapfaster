#!/usr/bin/env python
import subprocess
import os
import argparse
import sys

revision = '191020'

description = """
mapfaster [ revision %s ]
Find future updates at github.com/waylandy/SecretBox

Written by:
  Wayland Yeung
Contributors:
  Rahil Taujale   Aarya Venkat

USAGE: mapfaster <input> -s <int> -t <int> -profile <str>
                         -f <int> -n <float> -q <bool> -c <bool>

Requires the following programs to be in your paths:
  gnu parallel      : gnu.org/software/parallel/

""" % revision

parser = argparse.ArgumentParser(description=description, usage=argparse.SUPPRESS, formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-s', type=int,   help="number of times to split the input ; default 1 " , default=1)
parser.add_argument('-t', type=int,   help="number of threads                  ; default 1 " , default=1)
parser.add_argument('-f', type=int,   help="length of flanking regions to keep ; default 999999999" , default=999999999)
parser.add_argument('-n', type=float, help="sense                              ; default 0.9", default=0.9)
parser.add_argument('-q', action='store_true',  help="split the input, then quit")
parser.add_argument('-c', action='store_true',  help="classic output")
parser.add_argument('-profile', default="/auto/Data/profiles/ePKf",
                    help="run_gaps profile")

args, unk = parser.parse_known_args()

n_split          = args.s
n_threads        = args.t
flanking         = args.f
sense            = args.n
splitnquit       = args.q
classic          = args.c
profile          = args.profile

here = os.path.dirname(os.path.realpath(__file__))
cmd_rungaps    = here+"/ext/mapgaps"           # igs.umaryland.edu/labs/neuwald/software/mapgaps/
cmd_fastasplit = here+"/ext/fasta-splitter.pl" # kirill-kryukov.com/study/tools/fasta-splitter/
cmd_parallel   = "parallel"

def _checks():
    lu = len(unk)
    pens = ['.dft','.tpl','.mpa']
    if lu == 0:
        sys.stderr.write("No input sequence file provided\n")
        sys.stderr.write('Check usage: "mapfaster -h"\n')
        sys.exit()
    elif lu > 1:
        sys.stderr.write("Provide only a single sequence file\n")
        sys.stderr.write('Check usage: "mapfaster -h"\n')
        sys.exit()
    elif not os.path.isfile(unk[0]):
        sys.stderr.write("File does not exist: %s\n" % unk[0])
        sys.exit()
    stemmed = lambda x: all(os.path.isfile(x+p) for p in pens)
    if stemmed(profile):
        return unk[0], profile
    else:
        for p in pens:
            q = profile.rstrip(p) if profile.endswith(p) else profile
            if stemmed(q):
                return unk[0], q
    sys.stderr.write("Alignment profiles not found: %s\n" % profile)
    sys.exit()

def enumerate_parts(filename, splits, strict=True):
    if '.' in filename.split('/')[-1]:
        left = '.'.join(filename.split('.')[:-1])
        right = '.'+filename.split('.')[-1]
    else:
        left = filename
        right = ''
    pads = len(str(splits))
    parts = list(map(lambda x: left+'.part-'+str(x).zfill(pads)+right, range(1, splits+1)))

    if strict:
        for p in parts:
            assert os.path.isfile(p)
    return parts

def solve_parts(filename, parts):
    place = os.path.dirname(parts[0])
    place = '.' if  place=='' else place
    sys.stdout.write("TRYING TO LOOK AT FILES...\n\n")
    allfiles = os.listdir(place)

    sys.stdout.write("PREPARING TO CAT...\n\n")
    suffixes = set(map(lambda x: '_'+x.split("_")[-1], allfiles))
    suffixes = list(filter(lambda x: (x[-4:] in ['.cma','.seq','.mma']) and len(x) < 9, suffixes))
    alldic = {}

    for s in suffixes:
        alldic[filename+s] = list(filter(lambda x: x.endswith(s) and '.part-' in x, allfiles))
    return alldic

def check_presplit(filename, splits):
    if '.' in filename.split('/')[-1]:
        left = '.'.join(filename.split('.')[:-1])+'.part-'
        right = '.'+filename.split('.')[-1]
    else:
        left = filename+'.part-'
        right = ''
    place = os.path.dirname(filename)
    place = '.' if  place=='' else place
    allfiles = os.listdir(place)
    partfiles = []
    for x in allfiles:
        if x.endswith(right) and x.startswith(left):
            if x.rstrip(right).lstrip(left).isdigit():
                partfiles += [x]
    if set(partfiles) == set(enumerate_parts(filename, splits, strict=False)):
        return True
    else:
        for p in partfiles:
            os.remove(p)
        return False

def catfile_temporary(newfile, parts):
    sys.stdout.write("CAT      :  %s" % newfile+'._temp' + "\n")
    ra = [open(p, 'r') for p in parts]
    with open(newfile+'._temp', 'w') as w:
        for r in ra:
            for l in r:
                w.write(l)
    for r in ra:
        r.close()
    sys.stdout.write("REMOVING :  %s" % '\n            '.join(parts) + "\n")
    for f in parts:
        os.remove(f)

# check inputs
input_fasta, profile = _checks()

# check if presplit, split if not
if not check_presplit(input_fasta, n_split):
    subprocess.call(('%s %s --n-parts %s' % (cmd_fastasplit, input_fasta, n_split)).split())

if splitnquit:
    sys.exit(0)

parts = enumerate_parts(input_fasta, n_split)

# write all commands
with open(input_fasta+'.cmd.temp', 'w') as w:
    for p in parts:
        w.write('%s %s %s -O -I=%s:%s -sense=%s\n' % (cmd_rungaps, profile, p, flanking, flanking, sense))

# parallel run the commands
with open(input_fasta+'.rgp.cmd', 'w') as w:
    w.write('parallel -u -j %s < %s' % (n_threads, input_fasta+'.cmd.temp'))
subprocess.call(["bash", input_fasta+'.rgp.cmd'])
os.remove(input_fasta+'.rgp.cmd')
os.remove(input_fasta+'.cmd.temp')
alldic = solve_parts(input_fasta, parts)

# cat the parted files
for k in alldic:
    catfile_temporary(k, alldic[k])

# reform the temporary files
place = os.path.dirname(input_fasta)
place = '.' if  place=='' else place
tempfiles = list(filter(lambda x: x.endswith('._temp'), os.listdir(place)))
for file in tempfiles:
    newfile = file.rstrip('._temp')
    sys.stdout.write('REFORMING:  %s' % newfile + "\n")
    if newfile.endswith('.seq'):
        os.rename(file,newfile)
        continue
    if newfile.endswith('_A.mma') or newfile.endswith('_aln.cma'):
        skip_dollar_one = False
    elif newfile.endswith('.cma'):
        skip_dollar_one = True
    # figure out number of seqences
    count = 0
    with open(file) as r:
        for l in r:
            if l[0]=='$':
                if l[:3]=='$1=' and skip_dollar_one:
                    continue
                count += 1

    w = open(newfile, 'w')
    with open(file) as r:
        header1 = next(r).split('){') # changed to next() instead of .next for python 3
        w.write('('.join(header1[0].split('(')[:-1])+'('+str(count)+'){'+header1[1])
        w.write(next(r)+'\n')
        for l in r:
            if l[0]=='$':
                if l[:3]=='$1=' and skip_dollar_one:
                    continue
                w.write(l)
                w.write(next(r))
                w.write(next(r))
                w.write(next(r))
    w.write('_0].')
    w.close()
    os.remove(file)

for p in parts:
    os.remove(p)

class IterCMA:
    """
    An iterator to read CMA files.
    returns (seqnumber, seqname, seqcma)

    _name    : name of alignment file
    _aln     : alignment length
    _cmafile : the file you're iterating
    len      : number of sequences
    """
    def __init__(self, cmafile, flank=True):
        self._flank = flank
        self._cmafile = cmafile
        self._r = open(self._cmafile)
        name = self._r.next()
        self._name = name.split('=')[1].split('(')[0]
        self._aln  = self._r.next().count('*')
        self.len   = self._len()

    def __str__(self):
        return self._name

    def __repr__(self):
        return '<CMA file "%s" containing %s sequences>' % (self, self.len)

    def __len__(self):
        return self.len

    def __iter__(self):
        self._r = open(self._cmafile)
        return self

    def _len(self):
        with open(self._cmafile) as _r:
            return sum(1 for l in _r if l[0]=='$')

    def _excise(self, s, border=')('):
        b1, b2 = border
        b1s, b2s = True, True
        l, p = ['','',''], 0
        for e in s:
            if e==b1 and b1s:
                b1s = False
                p+=1
                continue
            elif e==b2 and b2s and not b1s:
                b2s = False
                p+=1
                continue
            l[p]+=e
        l = map(lambda x: ''.join(filter(lambda y: y not in '{\n})(*', x)), l)
        if self._flank:
            l[0] = l[0].lower()
            l[2] = l[2].lower()
            return l
        else:
            return ['',l[1],'']

    def _restore(self, name):
        n = name.find(')|}')
        if n==-1:
            return name, ''
        adi = name[name[:n+3].find('{|'):n+3]
        return name.replace(adi, '').strip(), adi

    def next(self):
        while True:
            l = self._r.next()
            if l[0]=='$':
                seqnumber = l[:-2]
            elif l[0]=='>':
                seqname = self._restore(l[1:].strip())
            elif '{(' in l:
                seqcma = self._excise(l)
                return seqnumber, seqname, seqcma

if not classic:
    with open(input_fasta+'.cfa', 'w') as w:
        for f in alldic:
            if f[-4:] == '.seq':
                os.remove(f)
            elif f[-4:] == '.cma':
                itc = IterCMA(f)
                for num, name, cma in itc:
                    w.write('>%s profile:%s\n%s\n\n' % (name[0], itc._name, ''.join(cma)))
                os.remove(f)
